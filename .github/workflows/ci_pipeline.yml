name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    # ... (job lint inalterado) ...
    name: Linter (Strict)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install -r requirements.txt
      - name: Run Strict Linter
        run: |
          PY_FILES=$(find . -name "*.py" -not -path "*/venv/*" -not -path "*/.env/*")
          if [ -z "$PY_FILES" ]; then
            echo "No Python files found!"
            exit 1
          fi
          pylint $PY_FILES --disable=all --enable=F,E,import-error,unreachable --fail-under=8

  test:
    name: Run Automated Tests
    needs: lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB_TEST }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      # --- CADA TESTE ABAIXO TERÁ SEU PRÓPRIO "SINAL VERDE" ---
      - name: ✅ Test Aluno Service
        if: always() # Garante que este passo rode mesmo que o anterior falhe
        env:
          DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }}"
        run: pytest tests/test_aluno_service.py --verbose

      - name: ✅ Test Livro Service
        if: always()
        env:
          DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }}"
        run: pytest tests/test_livro_service.py --verbose

      - name: ✅ Test Exemplar Service
        if: always()
        env:
          DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }}"
        run: pytest tests/test_exemplar_service.py --verbose
        
      - name: ✅ Test Emprestimo Service
        if: always()
        env:
          DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }}"
        run: pytest tests/test_emprestimo_service.py --verbose

      - name: ✅ Test Emprestimo-Exemplar Service
        if: always()
        env:
          DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }}"
        run: pytest tests/test_emprestimo_exemplar_service.py --verbose