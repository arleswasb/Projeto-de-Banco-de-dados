name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Linter (Strict)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest
          pip install -r requirements.txt
          
      - name: Run Strict Linter
        run: |
          # Find all Python files except in virtual envs
          PY_FILES=$(find . -name "*.py" -not -path "*/venv/*" -not -path "*/.env/*")
          if [ -z "$PY_FILES" ]; then
            echo "No Python files found!"
            exit 1
          fi
          
          echo "Files to analyze:"
          echo "$PY_FILES"
          
          # Run pylint with critical checks only
          python -m pylint $PY_FILES \
            --disable=all \
            --enable=F,E,import-error,unreachable \
            --fail-under=1

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest python-dotenv psycopg2-binary
      
      - name: Configure Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "Python path configured: $GITHUB_WORKSPACE"
      
      - name: Debug - Show imports
        run: |
          echo "Tentando importar o módulo db..."
          python -c "import sys; print(sys.path); from db import Base; print('Import successful!')" || \
          echo "Falha ao importar. Verifique a estrutura do projeto:"
          ls -la $GITHUB_WORKSPACE
      
      - name: Run tests
        env:
          DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}"
        run: |
          cd TRABALHO3  # Muda para o diretório do projeto
          pytest tests/ --verbose --cov=. --cov-report=xml