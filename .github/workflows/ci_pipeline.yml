# Nome do seu workflow
name: CI Pipeline

# Eventos que disparam o workflow
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Definição dos jobs
jobs:
  # Job 1: Rodar o Linter (só precisa rodar uma vez)
  lint:
    name: Code Quality Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install -r requirements.txt

      - name: Run Linter (Pylint)
        run: pylint trabalho3/

  # Job 2: Rodar os testes em paralelo, um job por arquivo
  test:
    name: Run Tests (${{ matrix.test_file }}) # O nome do job será dinâmico
    needs: lint # Este job só começa se o job 'lint' passar
    runs-on: ubuntu-latest

    # AQUI ESTÁ A MÁGICA: A ESTRATÉGIA DE MATRIZ
    strategy:
      fail-fast: false # Garante que todos os testes rodem, mesmo que um falhe
      matrix:
        # Defina aqui a lista de seus arquivos de teste
        test_file:
          - test_aluno_service.py
          - test_livro_service.py
          - test_exemplar_service.py
          - test_emprestimo_service.py
          - test_emprestimo_exemplar_service.py

    # Variáveis de ambiente (usando os segredos que você já deve ter configurado)
    env:
      DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}"

    # Os passos são os mesmos de antes, mas serão executados para cada item da matriz
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest python-dotenv # Garante que pytest e dotenv estejam instalados

      - name: Set up PostgreSQL
        uses: Harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: '16'
          postgresql db: ${{ secrets.POSTGRES_DB }}
          postgresql user: ${{ secrets.POSTGRES_USER }}
          postgresql password: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Wait for PostgreSQL to be ready
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          for i in `seq 1 10`; do
            pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }} && break
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }} || exit 1
      
      - name: Run Individual Test File
        run: pytest tests/${{ matrix.test_file }}