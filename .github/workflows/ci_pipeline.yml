name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Linter (Strict)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest
          pip install -r requirements.txt
          
      - name: Run Strict Linter
        run: |
          # Find all Python files except in virtual envs
          PY_FILES=$(find . -name "*.py" -not -path "*/venv/*" -not -path "*/.env/*")
          if [ -z "$PY_FILES" ]; then
            echo "No Python files found!"
            exit 1
          fi
          
          echo "Files to analyze:"
          echo "$PY_FILES"
          
          # Run pylint with critical checks only
          python -m pylint $PY_FILES \
            --disable=all \
            --enable=F,E,import-error,unreachable \
            --fail-under=1

  test:
    name: Run Tests (${{ matrix.test_file }})
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_file:
          - test_aluno_service.py
          - test_livro_service.py
          - test_exemplar_service.py
          - test_emprestimo_service.py
          - test_emprestimo_exemplar_service.py
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Find project directory (case insensitive)
        id: find_dir
        run: |
          PROJECT_DIR=$(find . -maxdepth 1 -type d -iname "trabalho3" -print -quit)
          if [ -z "$PROJECT_DIR" ]; then
            echo "Diret처rio do projeto n찾o encontrado!"
            echo "Diret처rios existentes:"
            ls -d */
            exit 1
          fi
          echo "PROJECT_DIR=${PROJECT_DIR#./}" >> $GITHUB_OUTPUT
          echo "Usando diret처rio: ${PROJECT_DIR#./}"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest python-dotenv psycopg2-binary
      
      - name: Configure Python path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE/${{ steps.find_dir.outputs.PROJECT_DIR }}" >> $GITHUB_ENV
          echo "Python path configured to: $PYTHONPATH"
      
      - name: Wait for PostgreSQL to be ready
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          for i in `seq 1 10`; do
            pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }} && break
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }} || exit 1
      
      - name: Run individual test file
        env:
          DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}"
        run: |
          cd ${{ steps.find_dir.outputs.PROJECT_DIR }}
          pytest tests/${{ matrix.test_file }} --verbose